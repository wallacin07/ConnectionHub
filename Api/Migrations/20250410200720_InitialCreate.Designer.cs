// <auto-generated />
using System;
using Api.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(ConnectionHubContext))]
    [Migration("20250410200720_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Api.Domain.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataComentario")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("comment_date");

                    b.Property<string>("Descrição")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("post_id")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK____Comment");

                    b.HasIndex("post_id");

                    b.HasIndex("user_id");

                    b.ToTable("comment", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataPostagem")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("post_date");

                    b.Property<string>("Descrição")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Img")
                        .HasColumnType("longtext")
                        .HasColumnName("image");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK____Post");

                    b.HasIndex("user_id");

                    b.ToTable("post", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("PerfilPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("perfil_photo");

                    b.HasKey("Id")
                        .HasName("PK____User");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.UserFollow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FolloweeId")
                        .HasColumnType("int");

                    b.Property<int>("FollowerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FolloweeId");

                    b.HasIndex("FollowerId");

                    b.ToTable("userFollow", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.Comment", b =>
                {
                    b.HasOne("Api.Domain.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("post_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Models.User", "Creator")
                        .WithMany("Comments")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Api.Domain.Models.Post", b =>
                {
                    b.HasOne("Api.Domain.Models.User", "Creator")
                        .WithMany("Posts")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Api.Domain.Models.UserFollow", b =>
                {
                    b.HasOne("Api.Domain.Models.User", "Followee")
                        .WithMany("Followers")
                        .HasForeignKey("FolloweeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Api.Domain.Models.User", "Follower")
                        .WithMany("Following")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Followee");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Api.Domain.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Api.Domain.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
